// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  Post           Post[]
  Comment        Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id    Int     @id @default(autoincrement())
  slug  String  @unique
  title String
  img   String  @default("no-image.webp")
  desc  String?
  Posts Post[]
}

model Post {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  short     String
  desc      String    @db.Text
  img       String    @default("no-image.webp")
  views     Int       @default(0)
  catSlug   String
  featured  String    @db.VarChar(1)
  status    String    @db.VarChar(1)
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  desc      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postSlug  String
  post      Post     @relation(fields: [postSlug], references: [slug])
}
